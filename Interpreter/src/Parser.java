/* Generated By:JavaCC: Do not edit this line. Parser.java */
  /** ID lister. */
  import icl.interpreter.ast.*;
  import icl.interpreter.ast.calc.*;
  import icl.interpreter.ast.conditions.*;
  import icl.interpreter.ast.leaf.*;
  import icl.interpreter.ast.statements.*;
  import icl.interpreter.values.Var;
  import icl.interpreter.values.Parameter;
  import icl.interpreter.types.*;
  import java.util.*;
  public class Parser implements ParserConstants {

  static final public ASTNode Start() throws ParseException {
  ASTNode node;
    node = EM();
    jj_consume_token(EEL);
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode EM() throws ParseException {
  ASTNode e1, e2;
    e1 = E();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SMICOL:
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SMICOL:
        jj_consume_token(SMICOL);
        e2 = EM();
                          e1 = new ASTSeq(e1, e2);
        break;
      case AND:
        jj_consume_token(AND);
        e2 = EM();
                        e1 = new ASTAnd(e1, e2);
        break;
      case OR:
        jj_consume_token(OR);
        e2 = EM();
                       e1 = new ASTOr(e1, e2);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode E() throws ParseException {
  Token op;
  ASTNode ea1, ea2;
    ea1 = EA();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DBLEQ:
    case GREATER:
    case GREATEREQL:
    case LESS:
    case LESSEQL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DBLEQ:
        jj_consume_token(DBLEQ);
        ea2 = EA();
                          ea1 = new ASTEquals(ea1, ea2);
        break;
      case GREATEREQL:
        jj_consume_token(GREATEREQL);
        ea2 = EA();
                                ea1 = new ASTGreaterEqual(ea1, ea2);
        break;
      case GREATER:
        jj_consume_token(GREATER);
        ea2 = EA();
                             ea1 = new ASTGreater(ea1, ea2);
        break;
      case LESSEQL:
        jj_consume_token(LESSEQL);
        ea2 = EA();
                             ea1 = new ASTLessEqual(ea1, ea2);
        break;
      case LESS:
        jj_consume_token(LESS);
        ea2 = EA();
                          ea1 = new ASTLess(ea1, ea2);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    {if (true) return ea1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode EA() throws ParseException {
  Token op;
  ASTNode t1, t2;
    t1 = T();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        t2 = EA();
                         t1 = new ASTAdd(t1,t2);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        t2 = EA();
                          t1 = new ASTSub(t1,t2);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode T() throws ParseException {
  Token op;
  ASTNode f1, f2;
  List<ASTNode> al = new ArrayList<ASTNode>();
    f1 = F();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      al = AL();
      jj_consume_token(RPAR);
          f1 = new ASTCall(f1, al);
      break;
    case ASSIGN:
      jj_consume_token(ASSIGN);
      f2 = E();
          f1 = new ASTAssign(f1, f2);
      break;
    default:
      jj_la1[8] = jj_gen;
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIMES:
        case DIV:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIMES:
          jj_consume_token(TIMES);
          f2 = F();
            f1 = new ASTMul(f1,f2);
          break;
        case DIV:
          jj_consume_token(DIV);
          f2 = F();
            f1 = new ASTDiv(f1,f2);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  static final public List<ASTNode> AL() throws ParseException {
    ASTNode e;
    List<ASTNode> al = new ArrayList<ASTNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
    case MINUS:
    case LPAR:
    case IF:
    case WHILE:
    case NOT:
    case LET:
    case FUN:
    case NEW:
    case DEREF:
    case FREE:
    case BOOL:
    case Id:
      e = EM();
              al.add(e);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        e = EM();
                                                al.add(e);
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
   {if (true) return al;}
    throw new Error("Missing return statement in function");
  }

// Variable Type
  static final public IType VT() throws ParseException {
    IType type; IType returnType; List<IType> tl = new ArrayList<IType>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPEINT:
      jj_consume_token(TYPEINT);
          {if (true) return TInt.getInstance();}
      break;
    case TYPEBOOL:
      jj_consume_token(TYPEBOOL);
          {if (true) return TBoolean.getInstance();}
      break;
    case TYPEREF:
      jj_consume_token(TYPEREF);
      jj_consume_token(LPAR);
      type = VT();
      jj_consume_token(RPAR);
          {if (true) return new TReference(type);}
      break;
    case TYPEFUN:
      jj_consume_token(TYPEFUN);
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEINT:
      case TYPEBOOL:
      case TYPEREF:
      case TYPEFUN:
        type = VT();
                                      tl.add(type);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          type = VT();
                                                                              tl.add(type);
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      returnType = VT();
          {if (true) return new TFunction(tl, returnType);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Parameter List
  static final public List<Parameter> PL() throws ParseException {
    Token tok; IType type;
    List<Parameter> pl = new ArrayList<Parameter>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Id:
      tok = jj_consume_token(Id);
      jj_consume_token(COLON);
      type = VT();
          pl.add(new Parameter(new String(tok.image), type));
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        tok = jj_consume_token(Id);
        jj_consume_token(COLON);
        type = VT();
          pl.add(new Parameter(new String(tok.image), type));
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
   {if (true) return pl;}
    throw new Error("Missing return statement in function");
  }

// Variable List
  static final public List<Var> VL() throws ParseException {
  Token tok = null; IType type; ASTNode node; List<IType> tl = new ArrayList<IType>();
  List<Var> vl = new ArrayList<Var>();
    tok = jj_consume_token(Id);
    jj_consume_token(COLON);
    type = VT();
    jj_consume_token(EQ);
    node = EM();
          vl.add(new Var(type, new String(tok.image), node));
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Id:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      tok = jj_consume_token(Id);
      jj_consume_token(COLON);
      type = VT();
      jj_consume_token(EQ);
      node = EM();
          vl.add(new Var(type, new String(tok.image), node));
    }
      {if (true) return vl;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode F() throws ParseException {
  Token tok;
  ASTNode node, node1, node2, node3;
  List<Parameter> pl = new ArrayList<Parameter>();
  List<Var> vl = new ArrayList<Var>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
      tok = jj_consume_token(Num);
      node = new ASTNum(Integer.parseInt(tok.image));
      break;
    case Id:
      tok = jj_consume_token(Id);
      node = new ASTId(new String(tok.image));
      break;
    case BOOL:
      tok = jj_consume_token(BOOL);
      node = new ASTBool(new String(tok.image));
      break;
    case LET:
      jj_consume_token(LET);
      vl = VL();
      jj_consume_token(IN);
      node2 = EM();
      jj_consume_token(END);
      node = new ASTLet(vl, node2);
      break;
    case FUN:
      jj_consume_token(FUN);
      pl = PL();
      jj_consume_token(RARW);
      node1 = EM();
      jj_consume_token(END);
      node = new ASTFunction(pl, node1);
      break;
    case DEREF:
      jj_consume_token(DEREF);
      node1 = F();
      node = new ASTDeref(node1);
      break;
    case NEW:
      jj_consume_token(NEW);
      node1 = F();
      node = new ASTNew(node1);
      break;
    case FREE:
      jj_consume_token(FREE);
      node1 = F();
      node = new ASTFree(node1);
      break;
    case IF:
      jj_consume_token(IF);
      node1 = EM();
      jj_consume_token(THEN);
      node2 = EM();
      jj_consume_token(ELSE);
      node3 = EM();
      jj_consume_token(END);
      node = new ASTIf(node1, node2, node3);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      node1 = EM();
      jj_consume_token(DO);
      node2 = EM();
      jj_consume_token(END);
      node = new ASTWhile(node1, node2);
      break;
    case NOT:
      jj_consume_token(NOT);
      node1 = EM();
      node = new ASTNot(node1);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      node1 = EM();
      node = new ASTNegative(node1);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      node = EM();
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x30000080,0x30000080,0x3e0000,0x3e0000,0x140,0x140,0x600,0x600,0x4000,0x1000,0x4a404120,0x1000,0x0,0x0,0x1000,0x0,0x0,0x4a404120,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x20ae,0x0,0x1e00,0x1e00,0x0,0x2000,0x2000,0x20ae,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

                       }
