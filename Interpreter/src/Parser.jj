  PARSER_BEGIN(Parser)


  /** ID lister. */
  import icl.interpreter.ast.*;
  import icl.interpreter.ast.calc.*;
  import icl.interpreter.ast.conditions.*;
  import icl.interpreter.ast.leaf.*;
  import icl.interpreter.ast.statements.*;
  import icl.interpreter.values.Var;
  import icl.interpreter.values.Parameter;
  import icl.interpreter.types.*;
  import java.util.*;
  public class Parser {}

  PARSER_END(Parser)

  SKIP :
  {
    " "
    | "\t"
    | "\r"
    | "\n"
  }

  TOKEN :
  {
    < Num: (["0"-"9"]) + >
    |
    < PLUS : "+" >
    |
    < SMICOL : ";" >
    |
    < MINUS : "-">
    |
    < TIMES : "*">
    |
    < DIV : "/">
    |
    < EON : "^">
    |
    < COMMA : ",">
    |
    < EEL: ";;">
    |
    < LPAR : "(" >
    |
    < RPAR : ")" >
    |
    < EQ: "=" >
    |
    < DBLEQ: "==" >
    |
    < GREATER: ">" >
    |
    < GREATEREQL: ">=" >
    |
    < LESS: "<" >
    |
    < LESSEQL: "<=" >
    |
    < IF: "if" >
    |
    < THEN: "then" >
    |
    < ELSE: "else" >
    |
    < WHILE: "while" >
    |
    < DO: "do" >
    |
    < NOT: "~" >
    |
    < AND: "&&" >
    |
    < OR: "||" >
    |
    < LET: "let" >
    |
    < IN: "in" >
    |
    < END: "end" >
    |
    < FUN: "fun" >
    |
    < NEW: "new" >
    |
    < DEREF: "!" >
    |
    < ASSIGN: ":=" >
    |
    < FREE: "free" >
    |
    < RARW: "->" >
    |
    < BOOL: "true" | "false" >
    |
    < COLON: ":" >
    |
    < TYPEINT: "int" >
    |
    < TYPEBOOL: "bool" >
    |
    < TYPEREF: "Ref" >
    |
    < TYPEFUN: "Fun" >
    |
    < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >

}


ASTNode Start():
{ 
  ASTNode node; 
}
{
	node = EM() <EEL>

  { return node; }
}


ASTNode EM() :
{
  ASTNode e1, e2;
}
{
  e1 = E() 
  ( 
    (<SMICOL> e2 = EM() { e1 = new ASTSeq(e1, e2); } 
    | <AND> e2 = EM() { e1 = new ASTAnd(e1, e2); }
    | <OR> e2 = EM() { e1 = new ASTOr(e1, e2); }
    )*   
     
  )
  
  { return e1; }
}

ASTNode E() :
{ 
  Token op;
  ASTNode ea1, ea2; 
}
{
  ea1 = EA() 
  (
      
     <DBLEQ> ea2 = EA() { ea1 = new ASTEquals(ea1, ea2); }
    | (<GREATEREQL> ea2 = EA() {ea1 = new ASTGreaterEqual(ea1, ea2); })
    | (<GREATER> ea2 = EA() {ea1 = new ASTGreater(ea1, ea2); })
    | (<LESSEQL> ea2 = EA() {ea1 = new ASTLessEqual(ea1, ea2); })
    | (<LESS> ea2 = EA() {ea1 = new ASTLess(ea1, ea2); })
    )? 

  { return ea1; }
}

ASTNode EA() :
{ 
  Token op;
  ASTNode t1, t2; 
}
{
  t1 = T() ( 
     
      <PLUS> t2 = EA() { t1 = new ASTAdd(t1,t2); } 
    | <MINUS> t2 = EA() { t1 = new ASTSub(t1,t2); } 
    
    )* 
    

  { return t1; } 
}

ASTNode T() :
{ 
  Token op;
  ASTNode f1, f2;
  List<ASTNode> al = new ArrayList<ASTNode>();
}
{
  f1 = F() ( 
    ( 
      ( <LPAR> al = AL() <RPAR> 
        { f1 = new ASTCall(f1, al); } )

      | <ASSIGN> f2 = E() 
        { f1 = new ASTAssign(f1, f2); }

      | (
            <TIMES> f2 = F() 
          { f1 = new ASTMul(f1,f2); } 

          | <DIV> f2 = F() 
          { f1 = new ASTDiv(f1,f2); }

        )*
      )  
    )

  { return f1; }
}

List<ASTNode> AL():
{
    ASTNode e;
    List<ASTNode> al = new ArrayList<ASTNode>();
}
{
  (e = EM() { al.add(e); } ( <COMMA> e = EM() { al.add(e); } )* )?

  {return al;}
}

// Variable Type
IType VT():
{ 
    IType type; IType returnType; List<IType> tl = new ArrayList<IType>();
}
{
    (<TYPEINT> 
        { return TInt.getInstance(); }
    |<TYPEBOOL> 
        { return TBoolean.getInstance(); }
    |<TYPEREF> <LPAR> type = VT() <RPAR> 
        { return new TReference(type); }
    |<TYPEFUN> <LPAR> ( type = VT() { tl.add(type); } ( <COMMA> type = VT() { tl.add(type); } )* )? <RPAR> returnType = VT() 
        { return new TFunction(tl, returnType); })
    
}

// Parameter List
List<Parameter> PL(): 
{
    Token tok; IType type;
    List<Parameter> pl = new ArrayList<Parameter>();
}
{
    (tok = <Id> <COLON> type = VT()
        { pl.add(new Parameter(new String(tok.image), type)); }
            
    ( <COMMA> tok = <Id> <COLON> type = VT()
        { pl.add(new Parameter(new String(tok.image), type)); } )* )?

  {return pl;}
}

// Variable List
List<Var> VL():
{
  Token tok = null; IType type; ASTNode node; List<IType> tl = new ArrayList<IType>();
  List<Var> vl = new ArrayList<Var>();
}
{
    tok = <Id> <COLON> type = VT() <EQ> node = EM() 
        { vl.add(new Var(type, new String(tok.image), node)); }

    (tok = <Id> <COLON> type = VT() <EQ> node = EM() 
        { vl.add(new Var(type, new String(tok.image), node)); })*
    
    { return vl; }
}

ASTNode F():
{ 
  Token tok; 
  ASTNode node, node1, node2, node3;
  List<Parameter> pl = new ArrayList<Parameter>();
  List<Var> vl = new ArrayList<Var>();
}
{
	(tok = <Num> 
    { node = new ASTNum(Integer.parseInt(tok.image)); }
    
    | tok = <Id>
    { node = new ASTId(new String(tok.image)); }

    | tok = <BOOL>
    { node = new ASTBool(new String(tok.image)); }

    | <LET> vl = VL() <IN> node2 = EM() <END> 
    { node = new ASTLet(vl, node2); }

    | <FUN> pl = PL() <RARW> node1 = EM() <END>
    { node = new ASTFunction(pl, node1); }

    | <DEREF> node1 = F() 
    { node = new ASTDeref(node1); }

    | <NEW>  node1 = F() 
    { node = new ASTNew(node1); }

    | <FREE>  node1 = F() 
    { node = new ASTFree(node1); }

    | <IF> node1 = EM() <THEN> node2 = EM() <ELSE> node3 = EM() <END>
    { node = new ASTIf(node1, node2, node3); }

    | <WHILE> node1 = EM() <DO> node2 = EM() <END>
    { node = new ASTWhile(node1, node2); }

    | <NOT> node1 = EM()
    { node = new ASTNot(node1); }

    | <MINUS> node1 = EM()
    { node = new ASTNegative(node1); }

    | <LPAR> node = EM() <RPAR>

    )

  { return node; }
}